import logging
import threading
import random
import string
import time
import sqlite3
import os
from flask import Flask, request, jsonify, render_template
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)
from mcrcon import MCRcon

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = "7829543177:AAEiDyUhfXFDWjHxv9k8eaCwI2pZznLNJ3Q"
RCON_HOST = "proxima.minerent.net"
RCON_PORT = 25811
RCON_PASSWORD = "sanumxxx"
WEBAPP_URL = "https://univappschedule.ru"

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
DB_PATH = "minecraft_clicker.db"

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            telegram_id INTEGER PRIMARY KEY,
            nickname TEXT NOT NULL,
            verified INTEGER NOT NULL DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS verification_codes (
            code TEXT PRIMARY KEY,
            telegram_id INTEGER NOT NULL,
            nickname TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            expires_at TIMESTAMP NOT NULL
        )
    ''')
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id)
    ''')
    
    cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_codes_expires ON verification_codes(expires_at)
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–æ–ª–±—Ü–∞–º –ø–æ –∏–º–µ–Ω–∏
    return conn

def cleanup_expired_codes():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    current_time = time.time()
    cursor.execute(
        "DELETE FROM verification_codes WHERE expires_at < ?", 
        (current_time,)
    )
    
    deleted_count = cursor.rowcount
    conn.commit()
    conn.close()
    
    if deleted_count > 0:
        print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–¥–æ–≤")

def get_user_by_telegram_id(telegram_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT * FROM users WHERE telegram_id = ?", 
        (telegram_id,)
    )
    
    user = cursor.fetchone()
    conn.close()
    
    return dict(user) if user else None

def create_user(telegram_id, nickname):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute(
            """INSERT INTO users (telegram_id, nickname, verified) 
               VALUES (?, ?, 0)""",
            (telegram_id, nickname)
        )
        conn.commit()
        conn.close()
        return True
    except sqlite3.IntegrityError:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        conn.close()
        return False

def verify_user(telegram_id):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        "UPDATE users SET verified = 1, last_active = CURRENT_TIMESTAMP WHERE telegram_id = ?",
        (telegram_id,)
    )
    
    success = cursor.rowcount > 0
    conn.commit()
    conn.close()
    
    return success

def update_user_activity(telegram_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        "UPDATE users SET last_active = CURRENT_TIMESTAMP WHERE telegram_id = ?",
        (telegram_id,)
    )
    
    conn.commit()
    conn.close()

def create_verification_code(telegram_id, nickname):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        "DELETE FROM verification_codes WHERE telegram_id = ?",
        (telegram_id,)
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    code = ''.join(random.choices(string.digits, k=6))
    expires_at = time.time() + 600  # 10 –º–∏–Ω—É—Ç
    
    cursor.execute(
        """INSERT INTO verification_codes (code, telegram_id, nickname, expires_at)
           VALUES (?, ?, ?, ?)""",
        (code, telegram_id, nickname, expires_at)
    )
    
    conn.commit()
    conn.close()
    
    return code

def get_verification_code(code):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT * FROM verification_codes WHERE code = ?",
        (code,)
    )
    
    code_data = cursor.fetchone()
    conn.close()
    
    return dict(code_data) if code_data else None

def delete_verification_code(code):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        "DELETE FROM verification_codes WHERE code = ?",
        (code,)
    )
    
    conn.commit()
    conn.close()

def get_user_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) as total FROM users")
    total = cursor.fetchone()['total']
    
    cursor.execute("SELECT COUNT(*) as verified FROM users WHERE verified = 1")
    verified = cursor.fetchone()['verified']
    
    conn.close()
    
    return {
        'total_users': total,
        'verified_users': verified,
        'unverified_users': total - verified
    }

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return render_template("index.html")

@flask_app.route("/api/register", methods=["POST"])
def register():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–æ–¥–æ–º –Ω–∏–∫–∞"""
    data = request.get_json()
    user_id = data.get("user_id")
    nickname = data.get("nickname", "").strip()

    if not user_id or not nickname:
        return jsonify({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∏–∫"}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∏–∫–∞ Minecraft (3-16 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
    if not (3 <= len(nickname) <= 16) or not nickname.replace("_", "").isalnum():
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–∞ Minecraft"}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = get_user_by_telegram_id(user_id)
    if existing_user:
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if existing_user['nickname'] != nickname:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE users SET nickname = ?, verified = 0 WHERE telegram_id = ?",
                (nickname, user_id)
            )
            conn.commit()
            conn.close()
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        create_user(user_id, nickname)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    code = create_verification_code(user_id, nickname)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ –∏–≥—Ä—É
    try:
        with MCRcon(RCON_HOST, RCON_PASSWORD, port=RCON_PORT) as mcr:
            mcr.command(f"title {nickname} title {{\"text\":\"–ö–û–î –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò\",\"color\":\"gold\",\"bold\":true}}")
            mcr.command(f"title {nickname} subtitle {{\"text\":\"{code}\",\"color\":\"yellow\",\"bold\":true}}")
            mcr.command(f"tellraw {nickname} [{{\"text\":\"–í–∞—à –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: \",\"color\":\"green\"}},{{\"text\":\"{code}\",\"color\":\"yellow\",\"bold\":true}}]")
            mcr.command(f"tellraw {nickname} [{{\"text\":\"–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç\",\"color\":\"gray\"}}]")
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤ –∏–≥—Ä—É: {str(e)}"}), 500

    return jsonify({
        "success": True,
        "message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É! –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    })

@flask_app.route("/api/verify", methods=["POST"])
def verify():
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É"""
    data = request.get_json()
    user_id = data.get("user_id")
    code = data.get("code", "").strip()

    if not user_id or not code:
        return jsonify({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–¥"}), 400

    # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–æ–¥—ã
    cleanup_expired_codes()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    code_data = get_verification_code(code)
    if not code_data:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–¥"}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if code_data["telegram_id"] != user_id:
        return jsonify({"error": "–ö–æ–¥ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª
    if time.time() > code_data["expires_at"]:
        delete_verification_code(code)
        return jsonify({"error": "–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."}), 400

    # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if verify_user(user_id):
        delete_verification_code(code)
        return jsonify({
            "success": True,
            "message": "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!"
        })
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"}), 500

@flask_app.route("/api/user_status", methods=["POST"])
def user_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.get_json()
    user_id = data.get("user_id")

    if not user_id:
        return jsonify({"error": "user_id required"}), 400

    user = get_user_by_telegram_id(user_id)
    if not user:
        return jsonify({"registered": False, "verified": False})

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if user['verified']:
        update_user_activity(user_id)

    return jsonify({
        "registered": True,
        "verified": bool(user["verified"]),
        "nickname": user["nickname"]
    })

@flask_app.route("/api/tap", methods=["POST"])
def tap():
    data = request.get_json()
    user_id = data.get("user_id")
    
    user = get_user_by_telegram_id(user_id)
    if not user or not user["verified"]:
        return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"}), 400

    nick = user["nickname"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    update_user_activity(user_id)

    try:
        with MCRcon(RCON_HOST, RCON_PASSWORD, port=RCON_PORT) as mcr:
            mcr.command(f"scoreboard players add {nick} HKC 1")
            res = mcr.command(f"scoreboard players get {nick} HKC")
        score = int(res.split("has")[1].strip().split()[0])
        return jsonify({"score": score})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@flask_app.route("/api/balance", methods=["POST"])
def balance():
    data = request.get_json()
    user_id = data.get("user_id")
    
    user = get_user_by_telegram_id(user_id)
    if not user or not user["verified"]:
        return jsonify({"score": 0})

    nick = user["nickname"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    update_user_activity(user_id)

    try:
        with MCRcon(RCON_HOST, RCON_PASSWORD, port=RCON_PORT) as mcr:
            res = mcr.command(f"scoreboard players get {nick} HKC")
        score = int(res.split("has")[1].strip().split()[0])
        return jsonify({"score": score})
    except:
        return jsonify({"score": 0})

@flask_app.route("/api/stats", methods=["GET"])
def stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    stats_data = get_user_stats()
    return jsonify(stats_data)

# === Telegram-–±–æ—Ç ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user_by_telegram_id(user_id)
    
    if user and user['verified']:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user['nickname']}! üéÆ\n"
            f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.\n"
            f"–ù–∞–∂–º–∏ /clicker —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É!"
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Minecraft –ö–ª–∏–∫–µ—Ä!\n"
            "–ù–∞–∂–º–∏ /clicker —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        )

async def open_clicker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton(
            "üöÄ –û—Ç–∫—Ä—ã—Ç—å –∫–ª–∏–∫–µ—Ä",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–∏–∫–µ—Ä:", reply_markup=reply_markup)

# === –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ===
def background_cleanup():
    """–§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–¥–æ–≤"""
    while True:
        try:
            cleanup_expired_codes()
            time.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")
            time.sleep(60)

# === –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ ===
def run_flask():
    flask_app.run(host="0.0.0.0", port=5000)

# === –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –∏ Flask ===
def main():
    logging.basicConfig(level=logging.INFO)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É
    threading.Thread(target=background_cleanup, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    threading.Thread(target=run_flask, daemon=True).start()

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("clicker", open_clicker))

    print("‚úÖ Flask –∏ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω—ã")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {get_user_stats()}")
    app.run_polling()

if __name__ == "__main__":
    main()
